generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  // This extension gives us `uuid_generate_v1mc()` which generates UUIDs that cluster better than `gen_random_uuid()`
  // while still being difficult to predict and enumerate.
  // Also, while unlikely, `gen_random_uuid()` can in theory produce collisions which can trigger spurious errors on
  // insertion, whereas it's much less likely with `uuid_generate_v1mc()`.
  extensions = [uuidOssp(map: "uuid-ossp")]
}

model Track {
  id            String              @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  audio         String
  image         String
  title         String              @db.VarChar(100)
  slug          String?
  artist        User                @relation(fields: [artistAddress], references: [address])
  artistAddress String              @db.VarChar(42)
  tags          TagsOnTracks[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  playEvents    PlayEvent[]
  playlists     TracksInPlaylists[]
  likes         Like[]

  @@unique([artistAddress, title])
  @@unique([artistAddress, slug])
  @@map("tracks")
}

model User {
  address    String      @id @db.VarChar(42)
  tracks     Track[]
  likes      Like[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  followedBy Follows[]   @relation("following")
  following  Follows[]   @relation("follower")
  playEvents PlayEvent[]
  playlists  Playlist[]

  @@map("users")
}

model Follows {
  follower    User     @relation("follower", fields: [followerId], references: [address])
  followerId  String   @db.VarChar(42)
  following   User     @relation("following", fields: [followingId], references: [address])
  followingId String   @db.VarChar(42)
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
  @@map("follows")
}

model Tag {
  name   String         @id @db.VarChar(20)
  tracks TagsOnTracks[]

  @@map("tags")
}

model TagsOnTracks {
  track   Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId String @db.Uuid
  tag     Tag    @relation(fields: [tagName], references: [name], onDelete: Cascade)
  tagName String @db.VarChar(20)

  @@id([trackId, tagName])
  @@map("tracks_tags")
}

model PlayEvent {
  user      User     @relation(fields: [userId], references: [address], onDelete: Cascade)
  userId    String   @db.VarChar(42)
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId   String   @db.Uuid
  createdAt DateTime @default(now())

  @@id([userId, trackId, createdAt])
  @@map("play_events")
}

model Playlist {
  id        String              @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  title     String              @db.VarChar(30)
  slug      String
  user      User                @relation(fields: [userId], references: [address], onDelete: Cascade)
  userId    String              @db.VarChar(42)
  tracks    TracksInPlaylists[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @default(now()) @updatedAt

  @@unique([userId, slug])
  @@map("playlists")
}

model TracksInPlaylists {
  track      Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId    String   @db.Uuid
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId String   @db.Uuid

  @@id([trackId, playlistId])
  @@map("playlists_tracks")
}

model Like {
  user      User     @relation(fields: [userId], references: [address], onDelete: Cascade)
  userId    String   @db.VarChar(42)
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId   String   @db.Uuid
  createdAt DateTime @default(now())

  @@id([userId, trackId])
  @@map("likes")
}
